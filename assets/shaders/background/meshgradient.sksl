const int NUM_POINTS = 5;
uniform float2 iResolution;
uniform float iTime;
uniform float3 iColors[NUM_POINTS];
uniform float forces[NUM_POINTS];

float noise(float2 p) {
    float2 k = float2(12.9898, 78.233);
    float dt = dot(p, k);
    float sn = fract(sin(dt) * 43758.5453);
    return sn;
}

half4 main(float2 fragCoord) {
    float2 uv = fragCoord / iResolution;

    float2 points[NUM_POINTS];

    float t = (iTime * 0.25);

    points[0] = float2(0.5 + 0.45 * sin(t * 1.2), 0.5 + 0.45 * cos(t * 1.1));
    points[1] = float2(0.5 + 0.4  * cos(t * 0.9),  0.5 + 0.4  * sin(t * 1.3));
    points[2] = float2(0.5 + 0.43 * sin(t * 0.7 + 1.0), 0.5 + 0.43 * cos(t * 0.6 + 2.0));
    points[3] = float2(0.5 + 0.42 * cos(t * 1.4 + 3.0), 0.5 + 0.42 * sin(t * 1.5 + 1.5));
    points[4] = float2(0.5 + 0.40 * sin(t * 1.7 + 4.0), 0.5 + 0.40 * cos(t * 1.8 + 2.5));

    float3 accumColor = float3(0.0);
    float totalWeight = 0.0;

    float minDist = 1.0e10;

    for (int i = 0; i < NUM_POINTS; ++i) {
        float dist = distance(uv, points[i]);
        if (dist < minDist) {
            minDist = dist;
        }
        float weight = forces[i] * exp(-dist * 10.0);

        accumColor += iColors[i] * weight;
        totalWeight += weight;
    }

    float3 finalColor = accumColor / totalWeight;

    float noiseValue = noise(uv * iResolution.xy);

    // Reduzimos bastante o range de intensidade do ruÃ­do
    float noiseStrength = mix(0.01, 0.05, smoothstep(0.15, 0.3, minDist));
    float3 noiseColor = finalColor * (1.0 + noiseStrength * (noiseValue - 0.3));

    return half4(noiseColor, 1.0);
}
